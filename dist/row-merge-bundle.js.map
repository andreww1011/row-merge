{"version":3,"file":"row-merge-bundle.js","sources":["../src/RowMerge.ts","../src/row-merge.ts"],"sourcesContent":["/*! \n *  Merge identical table rows jQuery plugin.\n *  Copyright (C) 2021  Andrew Wagner  github.com/andreww1011\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n * \n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n * \n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n *  USA\n */\n\nconst NULL_CELL = new class implements Cell {\n    columnAddress(): number {return 0;}\n    width(): number {return 0;}\n    getCell(): HTMLTableCellElement {return null;}\n    matches(other: Cell) {return false;}\n}\n\ninterface Cell {\n    columnAddress(): number;\n    width(): number;\n    getCell(): HTMLTableCellElement;\n    matches(other: Cell): boolean;\n}\n\nexport default class RowMerge {\n\n    private static SingleCell = class implements Cell {\n        \n        private col: number;\n        private w: number;\n        private cell: HTMLTableCellElement;\n        private matcher: (this:void, value: HTMLTableCellElement, other:HTMLTableCellElement) => boolean;\n\n        constructor(column: number, width: number, cell:HTMLTableCellElement, matcher: (this:void, value: HTMLTableCellElement, other:HTMLTableCellElement) => boolean) {\n            this.col = column;\n            this.w = width;\n            this.cell = cell;\n            this.matcher = matcher;\n        }\n        columnAddress(): number {return this.col;}\n        width(): number {return this.w;}\n        getCell(): HTMLTableCellElement {return this.cell;}\n        matches(other: Cell): boolean {return this.matcher(this.getCell(),other.getCell());}\n    }\n\n    private origTable: HTMLTableElement;\n    private mergeTable: HTMLTableElement;\n\n    constructor (tableTarget: JQuery<HTMLElement>, args: Args) {\n        let t = tableTarget.get(0);\n        if (!(t instanceof HTMLTableElement)) {\n            throw new Error(\"JQuery target must be a table element.\");\n        }\n        this.origTable = t;\n        let exc: Array<number> = args.zeroIndexed ? args.excludedColumns : args.excludedColumns.map((n) => n - 1);\n        this.mergeTable = RowMerge.merge(t, args.matcher, exc);\n    }\n\n    private static merge(table: HTMLTableElement, matcher: (this:void, value: HTMLTableCellElement, other:HTMLTableCellElement) => boolean, excludedColumns: Array<number>): HTMLTableElement {\n        let t:HTMLTableElement = <HTMLTableElement>table.cloneNode(true);\n        let s:HTMLCollectionOf<HTMLTableSectionElement> = t.tBodies;\n        for (let i = 0; i < s.length; i++) {\n            let section:HTMLTableSectionElement = s.item(i);\n            RowMerge.mergeSection(section, matcher, excludedColumns);\n        }\n        return t;\n    }\n\n    private static mergeSection(section: HTMLTableSectionElement, matcher: (this:void, value: HTMLTableCellElement, other:HTMLTableCellElement) => boolean, excludedColumns: Array<number>): void {\n        let rows: HTMLCollectionOf<HTMLTableRowElement> = section.rows;\n        if (rows.length == 0) {\n            return;\n        }\n        let arr:Array<Cell> = new Array();\n        arr.push(NULL_CELL);\n        for (let r = 0; r < rows.length; r++) {\n            let row = rows.item(r);\n            let cells: Array<Cell> = RowMerge.createCells(row.cells, matcher);\n            if (cells.length == 0) {\n                continue;\n            }\n            let ia: number = 0;\n            let ib: number = 0;\n            let arrNew: Array<Cell> = new Array();\n            while (ia < arr.length && ib < cells.length) {\n                let cellA: Cell = arr[ia];\n                let cellB: Cell = cells[ib];\n                let ca: number = cellA.columnAddress();\n                let cb: number = cellB.columnAddress();\n                if (ca > cb) {\n                    ib++;\n                    arrNew.push(cellB);\n                } else if (ca < cb) {\n                    ia++;\n                } else { \n                    //ca == cb\n                    if (excludedColumns.some((n) => ca === n)) {\n                        ia++;\n                        ib++;\n                        arrNew.push(cellB);\n                    } else {\n                        let wa: number = cellA.width();\n                        let wb: number = cellB.width();\n                        if (wa != wb) {\n                            ia++;\n                            ib++;\n                            arrNew.push(cellB);\n                        } else {\n                            //wa == wb\n                            if (cellA.matches(cellB)) {\n                                arrNew.push(cellA);\n                                cellA.getCell().rowSpan++;\n                                row.removeChild(cellB.getCell());\n                                ia++;\n                                ib++;\n                            } else {\n                                ia++;\n                                ib++;\n                                arrNew.push(cellB);\n                            }\n                        }\n                    }\n                }\n            }\n            for (; ib < cells.length; ib++) {\n                let cellB: Cell = cells[ib];\n                arrNew.push(cellB);\n            }\n            arr = arrNew;\n        }\n    }\n\n    private static createCells(cells: HTMLCollectionOf<HTMLTableCellElement>, matcher: (this:void, value: HTMLTableCellElement, other:HTMLTableCellElement) => boolean): Array<Cell> {\n        let a: Array<Cell> = new Array(cells.length);\n        for (let i = 0, col = 0; i < cells.length; i++) {\n            let c:HTMLTableCellElement = cells.item(i);\n            let width: number = c.colSpan;\n            a[i] = new RowMerge.SingleCell(col, width, c, matcher);\n            col += width;\n        }\n        return a;\n    }\n\n    public getMerged(): HTMLTableElement {\n        return this.mergeTable;\n    }\n\n    public getOriginal(): HTMLTableElement {\n        return this.origTable;\n    }\n}","/*! \n *  Merge identical table rows jQuery plugin.\n *  Copyright (C) 2021  Andrew Wagner  github.com/andreww1011\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n * \n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n * \n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n *  USA\n */\nimport $ from 'jquery';\nimport RowMerge from './RowMerge';\n\n// define the plugin function on the jQuery extension point.\n($.fn as any).rowMerge = function (this: JQuery, args: Args): any {\n    \n    const MATCH_TEXT_ONLY = function(this: void, value: HTMLTableCellElement, other: HTMLTableCellElement): boolean {\n            return value.textContent == other.textContent;\n    }\n    \n    let target = this;\n    // merge the global options with the per-call options.\n    args = $.extend({}, ($.fn as any).rowMerge.args, args);\n\n    // factory defaults\n    if (typeof args.matcher === 'undefined') args.matcher = MATCH_TEXT_ONLY;\n    if (typeof args.excludedColumns === 'undefined') args.excludedColumns = new Array();\n    if (typeof args.zeroIndexed === 'undefined') args.zeroIndexed = false;\n\n    let rowMerge = new RowMerge(target, args);\n    \n    var methods = {\n        merge: function(): void {\n            update(rowMerge.getMerged());\n        },\n        unmerge: function(): void {\n            update(rowMerge.getOriginal());\n        }\n    };\n    methods.merge();\n    return methods;\n\n    function update(table: HTMLTableElement): void {\n        const t = $(table);\n        target.replaceWith(t);\n        target = t;\n    }\n};\n\n// activate plugin by targeting selector\n$(function () {\n    // factory defaults\n    let selector: string = typeof ($.fn as any).rowMerge.selector === 'undefined' ? 'table.row-merge' : ($.fn as any).rowMerge.selector;\n    // target\n    let s: JQuery<HTMLElement> = $(selector);\n    s.each((i,e) => {\n        ($(e) as any).rowMerge();\n    });\n});\n\n// define the plugin's global default selector.\n($.fn as any).rowMerge.selector = undefined;\n\n// define the plugin's global default options.\n($.fn as any).rowMerge.args = {};"],"names":[],"mappings":";;;;;;;IAAA;;;;;;;;;;;;;;;;;;IAkBG;;;;;;IAOH,EAAA,OAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;;OAAA;;IAJI,EAAA,OAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;;OAAA;;IACA,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;eAAiB;OAAjB;;IACA,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAA,eAAA;;OAAA;;;;;;;;;aAmES;;YACD,+BAAA;IACA,YAAM,IAAY,KAAZ,yCAAA,CAAN;;;;;;;kCAI4B;;;iCAGf;;;;iBAGR;;kBACG;;;;;;;;;8BAMU;;;;kBAEA,SAAA;;;wBAEN,IAAI;8BACI;;;iCAEG;;;;;;uBAIG,SAAA;;;;wBAGJ;;;;;;0BAIF;4BACA;;;;;;;;IAlCR,YAAA;;;IAwCA,kBAAM,gBAAN;oBACU;;oBACN,MAAM;;;;;;sBAOW,MAAM,OAAN,MAAA;;IAEQ,gBAAA,aAAA,UAAA;;IAErB,gBAAA;;;;;IAMZ,gBAAA,WAAA,MAAA;;;;;;;oCAhCkB,UAAU,SAAO;;;;;qBA9EnC,SAA+B;IACnC,QAAA,OAAO,IAAP,MAAA;;;IAEJ,MAAA,YAAA;;;;uCAIC;IACL,gBAAO,mBAAP;;IACA,2BAAA,EAAO,gBAAP,EAAmB,GAAnB;;;iBA4GP,uBAAA,IAAA,OAAA,GAAA,SAAA;;;;;;;;;;;;;;;;;;yBAvFmB;;eAEH;;;;;IAKT,IAAA,OAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;;SAAA;;;;;;;;;;IAGA,IAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAA,eAAA,EAA+B;;SAA/B;;;;;;;;ICnFR;;;;;;;;;;;;;;;;;;IAkBG;;;IASC;;OAAA;;IAMA,mBAAA;;UACyC,wBAAI,CAAC,OAAO,6BAAkB;;IAEvE,MAAI,OAAO,IAAI,CAAC,OAAZ,gBAAJ;UAA6C,2BAAA;IAE7C,MAAI,WAAW,YAAX,gBAAJ;UAGI;UAEA;IACA,IAAA,OAAO,YAAA;IACH,MAAA,MAAM,CAAC,QAAQ,CAAC,SAAT,EAAD,CAAN;IACH;;IAEG,MAAA,OAAO,oBAAA,GAAP;;;cAIE;;;IAGV,iBAAA,MAAA;;;;;;;;;;IAWA,mJAAA;;;IAIS,EAAA,CAAC,KAAD,cAAU;;IAGT,GAHD;;;;;;;;;;;"}